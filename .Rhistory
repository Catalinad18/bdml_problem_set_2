fit(data = train)
fit_1.2 <- workflow_1.2 %>%
fit(data = train)
fit_1.3 <- workflow_1.3 %>%
fit(data = train)
fit_2.1 <- workflow_2.1 %>%
fit(data = train)
fit_2.2 <- workflow_2.2 %>%
fit(data = train)
fit_2.3 <- workflow_2.3 %>%
fit(data = train)
fit_3.1 <- workflow_3.1 %>%
fit(data = train)
fit_3.2 <- workflow_3.2 %>%
fit(data = train)
fit_3.3 <- workflow_3.3 %>%
fit(data = train)
predictiones_1.1 <- predict(fit_1.1 , new_data = test)
predictiones_1.2 <- predict(fit_1.2 , new_data = test)
predictiones_1.3 <- predict(fit_1.3, new_data = test)
predictiones_2.1 <- predict(fit_2.1 , new_data = test)
predictiones_2.2 <- predict(fit_2.2, new_data = test)
predictiones_2.3 <- predict(fit_2.3, new_data = test)
predictiones_3.1 <- predict(fit_3.1 , new_data = test)
predictiones_3.2 <- predict(fit_3.2, new_data = test)
predictiones_3.3 <- predict(fit_3.3, new_data = test)
eg <- read.csv("submission_template.csv")
View(predictiones_1.1)
View(predictiones_1.1)
View(test)
View(test)
submission_1.1 <- test %>%
select(property_id) %>%
predict(fit_1.1 , new_data = test)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price =predict(fit_1.1 , new_data = test))
View(submission_1.1)
View(submission_1.1)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price =predict(fit_1.1 , new_data = test)) %>%
rename(price = price)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price =predict(fit_1.1 , new_data = test)) %>%
rename(price = price$.pred)
View(eg)
View(eg)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price =predict(fit_1.1 , new_data = test))
colnames(submission_1.1$price) <- price
colnames(submission_1.1$price$.pred) <- price
colnames(submission_1.1) <- c("property price")
colnames(submission_1.1) <- c("property_id, price")
colnames(submission_1.1) <- c("property_id", "price")
submission_1.1 %>% rename(c("price" = "price$.pred"))
submission_1.1 <- test %>%
select(property_id) %>%
mutate(predict(fit_1.1 , new_data = test))
submission_1.1 <- test %>%
select(property_id) %>%
mutate(predict(fit_1.1 , new_data = test)) %>%
rename(price = .pred)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price = predict(fit_1.1 , new_data = test))
`colnames(submission_1.1)
''
colnames(submission_1.1)
1+1
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price = predict(fit_1.1 , new_data = test))
``
``''
submission_1.1 <- test %>%
select(property_id) %>%
mutate(price = predict(fit_1.1 , new_data = test))
colnames(submission_1.1)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(predict(fit_1.1 , new_data = test)) %>%
rename(price = .pred)
for (i in 1:3) {
submission_1.i <- test %>%
select(property_id) %>%
mutate(predict(fit_1.i , new_data = test)) %>%
rename(price = .pred)
}
for (i in 1:3) {
submission_1.i <- test %>%
select(property_id) %>%
mutate(predict(fit_1.(i) , new_data = test)) %>%
rename(price = .pred)
}
for (i in 1:3) {
submission_1.i <- test %>%
select(property_id) %>%
mutate(predict(get(paste("fit_1", i, sep = ".") , new_data = test))) %>%
rename(price = .pred)
}
submission_1.i <- test %>%
select(property_id) %>%
mutate(predict(fit_1.1, new_data = test)) %>%
rename(price = .pred)
submission_1.1 <- test %>%
select(property_id) %>%
mutate(predict(fit_1.1, new_data = test)) %>%
rename(price = .pred)
list_recipes <- list(rec_1, rec_2, rec_3)
#Lapply with workflows
fit_tidy_model <- function(x, df=train) {
lm_model <- linear_reg() %>%
set_engine("lm")
workflow <- workflow() %>%
add_model(lm_model) %>%
add_recipe(x)
fitted_model <-  workflow %>%
fit(data = df)
fitted_model
}
list_workflows <- lapply(list_recipes, function(x){fit_tidy_model(x, train)})
View(list_workflows)
View(list_workflows)
View(list_workflows)
View(list_workflows)
View(list_recipes)
View(list_recipes)
#Lapply with predictions
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test) %>%
mutate(Error = exp(logw) - exp(.pred)) #Error en pesos
predictions
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
#Lapply with predictions
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test) %>%
predictions
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test) %>%
predictions
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
list_workflows <- lapply(list_recipes, function(x){fit_tidy_model(x, train)})
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
View(list_workflows)
View(list_workflows)
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test)
predictions
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
View(list_predictions)
View(list_predictions)
View(list_predictions)
View(list_predictions)
predictions_OLS <- data.frame(list_predictions)
View(predictions_OLS)
View(predictions_OLS)
View(list_predictions)
View(list_predictions)
predictions_OLS.1 <- data.frame(list_predictions[[1]])
predictions_OLS.2 <- data.frame(list_predictions[[2]])
predictions_OLS.3 <- data.frame(list_predictions[[3]])
View(predictions_OLS.1)
View(predictions_OLS.1)
predictions_OLS.1 <- data.frame(list_predictions[[1]]) %>%
select(predictions_OLS.1$property_id, predictions_OLS.1$.pred) %>%
rename(predictions_OLS.1$price = predictions_OLS.1$.pred)
predictions_OLS.1 <- data.frame(list_predictions[[1]]) %>%
select(predictions_OLS.1$property_id, predictions_OLS.1$.pred)
predictions_OLS.1 <- data.frame(list_predictions[[1]])
predictions_OLS.2 <- data.frame(list_predictions[[2]])
predictions_OLS.3 <- data.frame(list_predictions[[3]])
predictions_OLS.1 %>%
select(property_id, .pred) %>%
rename(price = .pred)
predictions_OLS.1 <- predictions_OLS.1 %>%
select(property_id, .pred) %>%
rename(price = .pred)
for (i in 1:3) {
predictions_OLS.i <- predictions_OLS.i %>%
select(property_id, .pred) %>%
rename(price = .pred)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
predictions_OLSi <- predictions_OLSi %>%
select(property_id, .pred) %>%
rename(price = .pred)
}
for (i in 1:5) {
i + 2
}
for (i in 1:5) {
i + 2
print(i)
}
for (i in 1:5) {
a <- i + 2
print(i)
}
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "_")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
}
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
}
View(predictions_OLS1)
View(predictions_OLS1)
View(predictions_OLS2)
View(predictions_OLS2)
View(predictions_OLS3)
View(predictions_OLS3)
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto)) %>%
select(property_id, .pred) %>%
rename(price = .pred)
}
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
}
View(predictions_OLS1)
View(predictions_OLS1)
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
predictions
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
}
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test)
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
View(list_predictions)
View(list_predictions)
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test$property_id)
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
View(list_predictions)
View(list_predictions)
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
View(predictions_OLS1)
View(predictions_OLS1)
colnames(predictions_OLS.1)
View(predictions_OLS.1)
View(predictions_OLS.1)
colnames(predictions_OLS1)
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test$property_id)
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
View(list_predictions)
View(list_predictions)
predict_from_workflow <- function(w, df_test=test) {
predictions <- predict(w, new_data = df_test) %>%
bind_cols(df_test)
}
list_predictions <- lapply(list_workflows, function (w){predict_from_workflow(w, test)})
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
}
View(predictions_OLS1)
View(predictions_OLS1)
View(eg)
View(eg)
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
nombre_archivo <- paste("/Users/hectorsegura/Documentos/Big Data & ML/Taller 2", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
View(predictions_OLS1)
View(predictions_OLS1)
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
nombre_archivo <- paste("/Users/hectorsegura/Documentos/Big Data & ML/Taller 2", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
#nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
#nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
#nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
#nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
#nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_objeto, row.names = T)
}
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = T)
}
View(predictions_OLS1)
View(predictions_OLS1)
predictions_OLS1 <- data.frame(list_predictions[[1]])
predictions_OLS2 <- data.frame(list_predictions[[2]])
predictions_OLS3 <- data.frame(list_predictions[[3]])
for (i in 1:3) {
nombre_objeto <- paste("predictions_OLS", i, sep = "")
assign(nombre_objeto, get(nombre_objeto) %>%
select(property_id, .pred) %>%
rename(price = .pred))
nombre_archivo <- paste("", nombre_objeto, ".csv", sep = "")
write.csv(get(nombre_objeto), file = nombre_archivo, row.names = F)
}
getwd()
setwd("/Users/hectorsegura/Documentos/GitHub/bdml_problem_set_2/scripts")
#Primero el mapa de Bogotá y ubicar las UPL
upl_bog <- st_read("stores/unidadplaneamientolocal.gpkg") %>%
st_transform(crs=4326) %>%
select(c(NOMBRE, SECTOR, SHAPE))
upl_bog <- st_read("/Users/hectorsegura/Documentos/GitHub/bdml_problem_set_2/stores/unidadplaneamientolocal.gpkg") %>%
st_transform(crs=4326) %>%
select(c(NOMBRE, SECTOR, SHAPE))
db_sf <- db_sf %>%
st_join(upl_bog, left = T, join=st_intersects)
bbox_bog <- st_bbox(upl_bog)
setwd("/Users/hectorsegura/Documentos/GitHub/bdml_problem_set_2/")
upl_bog <- st_read("stores/unidadplaneamientolocal.gpkg") %>%
st_transform(crs=4326) %>%
select(c(NOMBRE, SECTOR, SHAPE))
db_sf <- db_sf %>%
st_join(upl_bog, left = T, join=st_intersects)
bbox_bog <- st_bbox(upl_bog)
source("scripts/functions_OSM.R")
zcomer <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = "landuse", value = "commercial")
View(zcomer)
View(zcomer)
zcomer <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = "landuse", value = "commercial") %>%
osmdata_sf()
View(zcomer)
View(zcomer)
#Zonas comerciales
zcomer_bog_points <- retrieve_amenities(bbox_bog, "landuse", "commercial", "polygons")
db_sf$dist_zcomer <- nearest_amenity(db_sf, zcomer_bog_points)
View(db_sf)
View(db_sf)
View(db)
View(db)
db$dist_zcomer <- nearest_amenity(db_sf, zcomer_bog_points)
View(db)
View(db)
airport_bog_points <- retrieve_amenities(bbox_bog, "aeroway", "aerodrome", "polygons")
db$dist_airport <- nearest_amenity(db_sf, airport_bog_points)
uni_bog_points <- retrieve_amenities(bbox_bog, "amenity", "university", "polygons")
db$dist_uni <- nearest_amenity(db_sf, uni_bog_points)
zindus_bog_points <- retrieve_amenities(bbox_bog, "landuse", "industrial", "polygons")
db$dist_zindus <- nearest_amenity(db_sf, zindus_bog_points)
View(db_sf)
View(db_sf)
db_sf <- db %>% mutate(distancia_minCC = dist_minCC)
db_sf <- db_sf %>%
mutate(area_CC = as.numeric(CC_geometria$areas[posicion]))
db_sf <- db_sf %>% mutate(distancia_minCCgrandes = dist_minCCgrandes)
db_sf <- db_sf %>%
mutate(Min_dist_vias = apply(dist_vias, 1, min))
db_sf <- db_sf %>%
mutate(Min_dist_principales = apply(dist_Principales, 1, min))
latitud_central <- mean(db_sf$lat)
longitud_central <- mean(db_sf$lon)
db_sf <- db_sf %>% mutate(distancia_minCC = dist_minCC)
db_NAs <- db_sf %>%
mutate(bathrooms = ifelse(property_type == "Casa" & is.na(bathrooms), 3, bathrooms),
bathrooms = ifelse(property_type == "Apartamento" & is.na(bathrooms), 2, bathrooms))
test <- db_NAs %>% subset(train == 0)
test <- test %>%
select(-price)
train <- db_NAs %>% subset(train == 1) # vamos a entrenar con el 79% de los datos
sp_data <- db_sf
View(sp_data)
View(sp_data)
fire_bog_points <- retrieve_amenities(bbox_bog, "amenity", "fire_station", "polygons")
sp_data$dist_firest <- nearest_amenity(sp_data, fire_bog_points)
View(sp_data)
View(sp_data)
#Estaciones de policía ya está en variables.R
#Estaciones de bomberos en cambio
fire_bog_points <- retrieve_amenities(bbox_bog, "amenity", "fire_station", "polygons")
sp_data$dist_firest <- nearest_amenity(sp_data, fire_bog_points)
#Estaciones de policía ya está en variables.R
#Estaciones de bomberos en cambio
fire_bog_points <- retrieve_amenities(bbox_bog, "amenity", "fire_station", "points")
sp_data$dist_firest <- nearest_amenity(sp_data, fire_bog_points)
checkOSM <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = "amenity", value = "fire_station") %>%
osmdata_sf()
View(checkOSM)
View(checkOSM)
fire_bog_points <- retrieve_amenities(bbox_bog, "amenity", "fire_station")
sp_data$dist_firest <- nearest_amenity(sp_data, fire_bog_points)
#Supermercado
supermarket_bog_points <- retrieve_amenities(bbox_bog, "shop", "supermarket", "points")
sp_data$dist_supermercado <- nearest_amenity(sp_data, supermarket_bog_points)
supermarket_bog_points <- retrieve_amenities(bbox_bog, "shop", "supermarket", "points")
db_sf$dist_supermercado <- nearest_amenity(db_sf, supermarket_bog_points)
zcomer_bog_points <- retrieve_amenities(bbox_bog, "landuse", "commercial", "polygons")
sp_data$dist_zcomer <- nearest_amenity(sp_data, zcomer_bog_points)
source("scripts/functions_OSM.R")
zcomer_bog_points <- retrieve_amenities(bbox_bog, "landuse", "commercial", "polygons")
sp_data$dist_zcomer <- nearest_amenity(sp_data, zcomer_bog_points)
View(sp_data)
View(sp_data)
write_csv(sp_data, file = "sp_dataH", row.names = F)
write_csv(sp_data, file = "sp_dataH.csv")
