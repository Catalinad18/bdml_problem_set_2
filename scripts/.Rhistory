length(unique(documento_tokenizado[[1]]))
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras <- union(lista_palabras1, lista_palabras2)
lista_palabras
install.packages("stopwords")
library(stopwords)
# Descargamos la lista de las stopwords en español de dos fuentes diferentes y las combinamos
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras2 <- stopwords(language = "es", source = "nltk")
lista_palabras <- union(lista_palabras1, lista_palabras2)
lista_palabras
documento_tokenizado <- documento_tokenizado[[1]]
n0 <- length(documento_tokenizado)
documento_tokenizado <- setdiff(documento_tokenizado, lista_palabras)
n1 <- length(documento_tokenizado)
n0 - n1
install.packages("SnowballC")
library(SnowballC)
library(SnowballC)
documento_tokenizado <- wordStem(documento_tokenizado, "spanish")
documento_tokenizado[1:500]
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
library(tidyverse)
frecuencia <- documento_tokenizado %>%
table() %>%
data.frame() %>%
rename("Palabra" = ".") %>%
arrange(desc(Freq))
set.seed(666)
png(filename = "wordcloud.png", width = 800, height = 800)
wordcloud(words = frecuencia$Palabra, freq = frecuencia$Freq, min.freq = 1,
max.words = 200, random.order=  FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
dev.off()
require(pacman)
p_load(tidyverse,caret, gtsummary)
set.seed(12)
credit <- readRDS(url("https://github.com/ignaciomsarmiento/datasets/blob/main/credit_class.rds?raw=true"))
head(credit)
tbl_summary(credit, by = Default, statistic = list(all_continuous() ~ "{mean} ({sd})"))
credit<-credit %>% mutate(Default=factor(Default,levels=c(1,0),labels=c("Sí","No")))
credit = credit %>%
mutate(historygood  = ifelse(test = history == "good",
yes = 1,
no = 0))
credit = credit %>%
mutate(historypoor = ifelse(test = history == "poor",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposeusedcar = ifelse(test = purpose == "usedcar",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposegoods.repair = ifelse(test = purpose == "goods.repair",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposeedu= ifelse(test = purpose == "edu",
yes = 1,
no = 0))
credit = credit %>%
mutate(foreigngerman= ifelse(test = foreign == "foreign",
yes = 1,
no = 0))
credit = credit %>%
mutate(rentTRUE= ifelse(test = rent == "TRUE",
yes = 1,
no = 0))
inTrain <- createDataPartition(
y = credit$Default,## La variable dependiente u objetivo
p = .7, ## Usamos 70%  de los datos en el conjunto de entrenamiento
list = FALSE)
training <- credit[ inTrain,]
testing  <- credit[-inTrain,]
nrow(training)
ctrl_def <- trainControl(
method = "cv",
summaryFunction = defaultSummary, #medida de rendimiento
number = 5) # número de folds
modelo_def <- train(Default ~ amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = ctrl_def,
family = "binomial",
preProcess = c("center", "scale")) # preprocesamiento de los datos
modelo_def
prediccion_def <- predict(modelo_def, newdata = testing)
confusionMatrix(prediccion_def, testing$Default)
control_two <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE)
modelo_two <- train( Default ~amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = control_two,
family = "binomial",
metric = 'ROC',
preProcess = c("center", "scale") ) # preprocesamiento de los datos
modelo_two
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
modelo <- train(Default ~amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = ctrl,
family = "binomial",
metric = 'ROC',
preProcess = c("center", "scale") )
modelo
library(pacman)
p_load(tidyverse,
rio,
tidymodels,
glmnet,
stargazer,
dplyr,
plotly,
leaflet,
rgeos,
tmaptools,
sf,
osmdata)
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
df <- df %>%
filter(!is.na(lat) & !is.na(lon))
df_test <- df_test %>%
filter(!is.na(lat) & !is.na(lon))
limites <- getbb("Bogotá Colombia")
limites
df <- df %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
df_test <- df_test %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
df <- df %>%
mutate(description = str_to_lower(description))
df_test <- df_test %>%
mutate(description = str_to_lower(description))
#Eliminamos tildes
df <- df %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
df_test <- df_test %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
#Eliminamos caracteres especiales que no sean alfanuméricos
df <- df %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df_test <- df_test %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df <- df %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_test <- df_test %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
#test
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
df <- df %>%
mutate(area = str_extract(description, "(\\d+|\\w+) mts|(\\d+|\\w+) m2|(\\d+|\\w+) metros|(\\d+|\\w+) metros cuadrados|(\\d+|\\w+) metros 2|(\\d+|\\w+) metros2"))
df_test <- df_test %>%
mutate(area = str_extract(description, "(\\d+|\\w+) mts|(\\d+|\\w+) m2|(\\d+|\\w+) metros|(\\d+|\\w+) metros cuadrados|(\\d+|\\w+) metros 2|(\\d+|\\w+) metros2"))
area_escrita <- c("seis", "siete", "ocho", "nueve|nuebe", "diez|dies", "once|onse", "doce|dose", "trece|trese", "catorce|catorse", "quince|quinse", "dieciseis|diesiseis", "diecisiete|diesisiete", "dieciocho|diesiocho", "diecinueve|diesinueve", "veinte|beinte", "veintiun|beintiun|ventiun|bentiun", "veintidos|ventidos|bentidos|beintidos", "veintitres|ventitres|bentitres|beintitres", "veinticuatro|venticuatro|benticuatro|beinticuatro", "veinticinco|venticinco|beinticinco|benticinco", "veintiseis|ventiseis|beintiseis|bentiseis", "veintisiete|ventisiete|beintisiete|bentisiete", "veintiocho|ventiocho|beintiocho|bentiocho", "veintinueve|ventinueve|beintinueve|bentinueve", "treinta", "treinta y uno", "treinta y dos", "treinta y tres", "treinta y cuatro", "treinta y cinco", "treinta y seis", "treinta y siete", "treinta y ocho", "treinta y nueve", "cuarenta", "cuarenta y uno", "cuarenta y dos", "cuarenta y tres", "cuarenta y cuatro", "cuarenta y cinco", "cuarenta y seis", "cuarenta y siete", "cuarenta y ocho", "cuarenta y nueve", "cincuenta", "cincuenta y uno", "cincuenta y dos", "cincuenta y tres", "cincuenta y cuatro", "cincuenta y cinco", "cincuenta y seis", "cincuenta y siete", "cincuenta y ocho", "cincuenta y nueve", "sesenta", "sesenta y uno", "sesenta y dos", "sesenta y tres", "sesenta y cuatro", "sesenta y cinco", "sesenta y seis", "sesenta y siete", "sesenta y ocho", "sesenta y nueve", "setenta", "setenta y uno", "setenta y dos", "setenta y tres", "setenta y cuatro", "setenta y cinco", "setenta y seis", "setenta y siete", "setenta y ocho", "setenta y nueve", "ochenta", "ochenta y uno", "ochenta y dos", "ochenta y tres", "ochenta y cuatro", "ochenta y cinco", "ochenta y seis", "ochenta y siete", "ochenta y ocho", "ochenta y nueve", "noventa", "noventa y uno", "noventa y dos", "noventa y tres", "noventa y cuatro", "noventa y cinco", "noventa y seis", "noventa y siete", "noventa y ocho", "noventa y nueve", "cien")
area_numerica <- as.character(6:100)
df <- df %>%
mutate(area = str_replace_all(area, setNames(area_numerica, area_escrita)))
df_test <- df_test %>%
mutate(area = str_replace_all(area, setNames(area_numerica, area_escrita)))
df <- df %>%
mutate(area = as.integer(str_extract(area, "\\d+")))
df_test <- df_test %>%
mutate(area = as.integer(str_extract(area, "\\d+")))
summary(df$surface_total) %>%
as.matrix() %>%
as.data.frame()
summary(df$surface_covered) %>%
as.matrix() %>%
as.data.frame()
distributionSurfaceTotal <- function (surface_totall) {
N = length(df$surface_total)
surface_totall <- na.omit(df$surface_total)
hist( df$surface_total,col = "light blue")
}
distributionSurfaceTotal()
distributionSurfaceCovered <- function (surface_coveredd) {
N = length(df$surface_covered)
surface_coveredd <- na.omit(df$surface_covered)
hist( df$surface_covered,col = "light blue")
}
distributionSurfaceCovered()
distributionSurfaceTotalTest <- function (surface_totall) {
N = length(df_test$surface_total)
surface_totall <- na.omit(df_test$surface_total)
hist( df_test$surface_total,col = "light blue")
}
distributionSurfaceTotalTest()
distributionSurfaceCoveredTest <- function (surface_coveredd) {
N = length(df_test$surface_covered)
surface_coveredd <- na.omit(df_test$surface_covered)
hist( df_test$surface_covered,col = "light blue")
}
distributionSurfaceCoveredTest()
df <- df %>%
mutate(area = ifelse(area > 1500| area < 16, NA, area))
df_test <- df_test %>%
mutate(area = ifelse(area > 1500 | area < 16, NA, area))
df$surface_total <- ifelse(is.na(df$surface_total), df$area, df$surface_total)
df_test$surface_total <- ifelse(is.na(df_test$surface_total), df_test$area, df_test$surface_total)
df$surface_covered <- ifelse(is.na(df$surface_covered), df$area, df$surface_covered)
df_test$surface_covered <- ifelse(is.na(df_test$surface_covered), df_test$area, df_test$surface_covered)
df$surface_total <- ifelse(is.na(df$surface_total) | is.na(df$surface_covered) | df$surface_total < df$surface_covered, df$surface_covered, df$surface_total)
df_test$surface_total <- ifelse(is.na(df_test$surface_total) | is.na(df_test$surface_covered) | df_test$surface_total < df_test$surface_covered, df_test$surface_covered, df_test$surface_total)
mediana_sup_cubierta <- median(df$surface_covered, na.rm = TRUE) #108
mediana_sup_total <- median(df$surface_total, na.rm = TRUE) #110
mediana_sup_cubierta_test <- median(df_test$surface_covered, na.rm = TRUE) #118
mediana_sup_total_test <- median(df_test$surface_total, na.rm = TRUE) #118
df <- df %>%
mutate(surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
df_test <- df_test %>%
mutate(surface_covered = replace_na(surface_covered, mediana_sup_cubierta_test),
surface_total = replace_na(surface_total, mediana_sup_total_test),)
distributionPrice <- function (pricee) {
N = length(df$price)
pricee <- na.omit(df$price)
hist( df$price,col = "light blue")
}
distributionPrice()
summary(df$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
df <- df %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
summary(df$precio_por_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
df <- df %>%
filter(between(precio_por_mt2, 600000,  15e6))
p <- ggplot(df, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
p
summary(df$bathrooms) %>%
as.matrix() %>%
as.data.frame()
distributionBathrooms <- function (bathrooms) {
N = length(df$bathrooms)
bathrooms <- na.omit(df$bathrooms)
hist( df$bathrooms,col = "light blue")
}
distributionBathrooms()
distributionBathroomsTest <- function (bathrooms) {
N = length(df_test$bathrooms)
bathrooms <- na.omit(df_test$bathrooms)
hist( df_test$bathrooms,col = "light blue")
}
distributionBathroomsTest()
df$bathrooms <- ifelse(is.na(df$bathrooms), df$bathrooms_info, df$bathrooms)
df %>%count(bathrooms) %>% head() #Moda es 2
df_test %>%count(bathrooms) %>% head() #Moda es 2
df <- df %>%
mutate(bathrooms = replace_na(bathrooms, 2))
df_test <- df_test %>%
mutate(bathrooms = replace_na(bathrooms, 2))
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
df <- df %>%
mutate(piso_info = str_extract(description, "(\\w+|\\d+) piso (\\w+|\\d+)"))
df_test <- df_test %>%
mutate(piso_info = str_extract(description, "(\\w+|\\d+) piso (\\w+|\\d+)"))
numeros_escritos <- c("uno|primer|primero", "dos|segund|segundo", "tres|tercer|tercero", "cuatro|cuarto", "cinco|quinto", "seis|sexto", "siete|septimo", "ocho|octavo", "nueve|noveno", "diez|decimo", "once|undecimo|onceavo", "doce|duodecimo|doceavo|doseavo", "trece|trese|treceavo|treseavo", "catorce|catorse|catorceavo|catorseavo", "quince|quinse|quinceavo|quinseavo")
numeros_numericos <- as.character(1:15)
df <- df %>%
mutate(piso_info = str_replace_all(piso_info, setNames(numeros_numericos, numeros_escritos)))
df_test <- df_test %>%
mutate(piso_info = str_replace_all(piso_info, setNames(numeros_numericos, numeros_escritos)))
df <- df %>%
mutate(piso_numerico = as.integer(str_extract(piso_info, "\\d+")))
df_test <- df_test %>%
mutate(piso_numerico = as.integer(str_extract(piso_info, "\\d+")))
#Eliminamos datos extraños de piso
df <- df %>%
mutate(piso_numerico = ifelse(piso_numerico > 40, NA, piso_numerico))
df_test <- df_test %>%
mutate(piso_numerico = ifelse(piso_numerico > 40, NA, piso_numerico))
#Imputamos moda para valores faltantes de piso, en caso de que se trate de una casa
df %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
#La moda es 2
df_test %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
#La moda es 2
df <- df %>%
mutate(piso_numerico = replace_na(piso_numerico, 2))
df_test <- df_test %>%
mutate(piso_numerico = replace_na(piso_numerico, 2))
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
distributionRooms <- function (rooms) {
N = length(df$rooms)
rooms <- na.omit(df$rooms)
hist( df$rooms,col = "light blue")
}
distributionRooms()
summary(df$rooms) %>%
as.matrix() %>%
as.data.frame()
df %>%count(rooms) %>% head() #La moda es 3
df_test %>%count(rooms) %>% head() #La moda es 3
df %>%count(rooms) %>% head() #La moda es 3
df_test %>%count(rooms) %>% head() #La moda es 3
df <- df %>%
mutate(rooms = replace_na(rooms, 3))
df_test <- df_test %>%
mutate(rooms = replace_na(rooms, 3))
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
write_csv(df, "base_datos_limpia_train.csv")
write_csv(df_test, "base_datos_limpia_test.csv")
write_csv(df, /stores/"base_datos_limpia_train.csv")
write_csv(df, \stores\"base_datos_limpia_train.csv")
write_csv(df, "stores/base_datos_limpia_train.csv")
write_csv(df, "stores/base_datos_limpia_train.csv")
test_data <- read_csv("base_datos_limpia_test.csv")
train_data <- read_csv("base_datos_limpia_train.csv")
#Append data
train_data <- train_data %>% mutate(type = "train")
test_data <- test_data %>% mutate(type = "test")
data <- rbind(train_data, test_data)
View(df_test)
View(df)
df_test <- df_test %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
write_csv(df, "base_datos_limpia_train.csv")
write_csv(df_test, "base_datos_limpia_test.csv")
test_data <- read_csv("base_datos_limpia_test.csv")
train_data <- read_csv("base_datos_limpia_train.csv")
#Append data
train_data <- train_data %>% mutate(type = "train")
test_data <- test_data %>% mutate(type = "test")
data <- rbind(train_data, test_data)
##Parqueadero
data <- data %>%
mutate(parqueadero = as.numeric(grepl("parqueadero | garaje", data$description)))
##Balcón
data <- data %>%
mutate(balcon = as.numeric(grepl("balc", data$description)))
##Terraza
data <- data %>%
mutate(terraza = as.numeric(grepl("terraza", data$description)))
source("scripts/functions_OSM.R")
source("scripts/functions_OSM.R")
source("functions_OSM.R")
sp_data <- st_as_sf(data, coords = c("lon", "lat"), crs = 4326)
#Primero el mapa de Bogotá y ubicar las UPL
upl_bog <- st_read("stores/unidadplaneamientolocal.gpkg") %>%
st_transform(crs=4326) %>%
select(c(NOMBRE, SECTOR, SHAPE))
#Primero el mapa de Bogotá y ubicar las UPL
upl_bog <- st_read("unidadplaneamientolocal.gpkg") %>%
st_transform(crs=4326) %>%
select(c(NOMBRE, SECTOR, SHAPE))
sp_data <- sp_data %>%
st_join(upl_bog, left = T, join=st_intersects)
bbox_bog <- st_bbox(upl_bog)
#Parques
parques_bog_points <- retrieve_amenities(bbox = bbox_bog, key = "leisure", value = "park", type = "polygons")
sp_data$dist_parque <- nearest_amenity(sp_data, parques_bog_points)
#Hospitales
hospitals_bog_points <- retrieve_amenities(bbox_bog, "amenity", "hospital")
sp_data$dist_hsopital <- nearest_amenity(sp_data, hospitals_bog_points)
#Colegios
schools_bog_points <- retrieve_amenities(bbox_bog, "amenity", "school")
sp_data$dist_colegio <- nearest_amenity(sp_data, schools_bog_points)
#Buses
bus_bog_points <- retrieve_amenities(bbox_bog, "amenity", "bus_station", "points")
sp_data$dist_bus <- nearest_amenity(sp_data, bus_bog_points)
#Policía
police_bog_points <- retrieve_amenities(bbox_bog, "amenity", "police")
sp_data$dist_policia <- nearest_amenity(sp_data, police_bog_points)
#Bares
bar_bog_points <- retrieve_amenities(bbox_bog, "amenity", "bar", "points")
sp_data$dist_bar <- nearest_amenity(sp_data, bar_bog_points)
#Restaurantes
restaurant_bog_points <- retrieve_amenities(bbox_bog, "amenity", "restaurant", "points")
sp_data$dist_restaurante <- nearest_amenity(sp_data, restaurant_bog_points)
#Club-discoteca
nightclub_bog_points <- retrieve_amenities(bbox_bog, "amenity", "nightclub", "points")
sp_data$dist_nightclub <- nearest_amenity(sp_data, nightclub_bog_points)
#Carcel
prison_bog_points <- retrieve_amenities(bbox_bog, "amenity", "prison", "points")
sp_data$dist_carcel <- nearest_amenity(sp_data, prison_bog_points)
#Supermercado
supermarket_bog_points <- retrieve_amenities(bbox_bog, "shop", "supermarket", "points")
sp_data$dist_supermercado <- nearest_amenity(sp_data, supermarket_bog_points)
#Mall
mall_bog_points <- retrieve_amenities(bbox_bog, "shop", "mall")
sp_data$dist_mall <- nearest_amenity(sp_data, mall_bog_points)
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
p_load("dplyr", "tidyverse", "sf", "leaflet", "Rcpp", "rio", "plotly", "tmaptools", "osmdata",
"tidymodels", "ggmap", "tm", "udpipe", "stringi", "gdata")
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
model_udpipe <- udpipe_load_model("spanish-gsd.udpipe")
model_udpipe <- udpipe_load_model("spanish-GSD.udpipe")
udpipe_load_model(?)
udpipe_load_model?
lemmatizer <- function(x, model) {
stemmed_descriptions <- udpipe_annotate(model, x, tagger = "default", parser = "none")
tibble <- as_tibble(stemmed_descriptions)
paste(tibble$lemma, collapse = " ")
}
lemmatizer <- function(x, model) {
stemmed_descriptions <- udpipe_annotate(model, x, tagger = "default", parser = "none")
tibble <- as_tibble(stemmed_descriptions)
paste(tibble$lemma, collapse = " ")
}
model_udpipe <- udpipe_load_model("spanish-gsd-ud-2.5-191206.udpipe")
clean_descriptions <- function(v){
useless_words <- c("cod", "codfr", "m2", "mt2", "metros", "cuadrados", "area", "fr", "mts", "x", "br", "fr", "aacute", "eacute",
"iacute", "oacute", "uacute", "tilde", "b", "patricia", "tania", "uberney", "luzma")
descriptions <- VCorpus(VectorSource(v), readerControl = list(language = "spanish"))
descriptions <- tm_map(descriptions, content_transformer(tolower))
descriptions <- tm_map(descriptions, removeWords, stopwords("spanish"))
descriptions <- tm_map(descriptions, removeNumbers)
descriptions <- tm_map(descriptions, removeWords, useless_words)
descriptions <- tm_map(descriptions, stripWhitespace)
descriptions <- data.frame(description=unlist(sapply(descriptions, `[`, "content")),
stringsAsFactors=F)
stemmed_descriptions <- c()
for (d in descriptions$description) {
stemmed <- lemmatizer(d, model_udpipe)
stemmed_descriptions <- c(stemmed_descriptions, stemmed)
}
stemmed_descriptions <- stri_trans_general(stemmed_descriptions, id = "Latin-ASCII")
#Return stemmed descriptions in a vector
stemmed_descriptions
}
clean_descriptions <- function(v){
useless_words <- c("cod", "codfr", "m2", "mt2", "metros", "cuadrados", "area", "fr", "mts", "x", "br", "fr", "aacute", "eacute",
"iacute", "oacute", "uacute", "tilde", "b", "patricia", "tania", "uberney", "luzma")
descriptions <- VCorpus(VectorSource(v), readerControl = list(language = "spanish"))
descriptions <- tm_map(descriptions, content_transformer(tolower))
descriptions <- tm_map(descriptions, removeWords, stopwords("spanish"))
descriptions <- tm_map(descriptions, removeNumbers)
descriptions <- tm_map(descriptions, removeWords, useless_words)
descriptions <- tm_map(descriptions, stripWhitespace)
descriptions <- data.frame(description=unlist(sapply(descriptions, `[`, "content")),
stringsAsFactors=F)
stemmed_descriptions <- c()
for (d in descriptions$description) {
stemmed <- lemmatizer(d, model_udpipe)
stemmed_descriptions <- c(stemmed_descriptions, stemmed)
}
#Somme lemmas have accents
stemmed_descriptions <- stri_trans_general(stemmed_descriptions, id = "Latin-ASCII")
#Return stemmed descriptions in a vector
stemmed_descriptions
}
train_descriptions <- clean_descriptions(train_data$description)
train_descriptions_corpus <- VCorpus(VectorSource(train_descriptions), readerControl = list(language = "spanish"))
dtm_train<-DocumentTermMatrix(train_descriptions_corpus)
rm_sparse_dtm_train <- removeSparseTerms(dtm_train, 0.99)
