substr(documento, 1, 1000)
library(tokenizers)
install.packages("tokenizers")
library(tokenizers)
documento_tokenizado <- tokenize_words(documento)
length(unique(documento_tokenizado[[1]]))
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras <- union(lista_palabras1, lista_palabras2)
lista_palabras
install.packages("stopwords")
library(stopwords)
# Descargamos la lista de las stopwords en español de dos fuentes diferentes y las combinamos
lista_palabras1 <- stopwords(language = "es", source = "snowball")
lista_palabras2 <- stopwords(language = "es", source = "nltk")
lista_palabras <- union(lista_palabras1, lista_palabras2)
lista_palabras
documento_tokenizado <- documento_tokenizado[[1]]
n0 <- length(documento_tokenizado)
documento_tokenizado <- setdiff(documento_tokenizado, lista_palabras)
n1 <- length(documento_tokenizado)
n0 - n1
install.packages("SnowballC")
library(SnowballC)
library(SnowballC)
documento_tokenizado <- wordStem(documento_tokenizado, "spanish")
documento_tokenizado[1:500]
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
library(tidyverse)
frecuencia <- documento_tokenizado %>%
table() %>%
data.frame() %>%
rename("Palabra" = ".") %>%
arrange(desc(Freq))
set.seed(666)
png(filename = "wordcloud.png", width = 800, height = 800)
wordcloud(words = frecuencia$Palabra, freq = frecuencia$Freq, min.freq = 1,
max.words = 200, random.order=  FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
dev.off()
require(pacman)
p_load(tidyverse,caret, gtsummary)
set.seed(12)
credit <- readRDS(url("https://github.com/ignaciomsarmiento/datasets/blob/main/credit_class.rds?raw=true"))
head(credit)
tbl_summary(credit, by = Default, statistic = list(all_continuous() ~ "{mean} ({sd})"))
credit<-credit %>% mutate(Default=factor(Default,levels=c(1,0),labels=c("Sí","No")))
credit = credit %>%
mutate(historygood  = ifelse(test = history == "good",
yes = 1,
no = 0))
credit = credit %>%
mutate(historypoor = ifelse(test = history == "poor",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposeusedcar = ifelse(test = purpose == "usedcar",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposegoods.repair = ifelse(test = purpose == "goods.repair",
yes = 1,
no = 0))
credit = credit %>%
mutate(purposeedu= ifelse(test = purpose == "edu",
yes = 1,
no = 0))
credit = credit %>%
mutate(foreigngerman= ifelse(test = foreign == "foreign",
yes = 1,
no = 0))
credit = credit %>%
mutate(rentTRUE= ifelse(test = rent == "TRUE",
yes = 1,
no = 0))
inTrain <- createDataPartition(
y = credit$Default,## La variable dependiente u objetivo
p = .7, ## Usamos 70%  de los datos en el conjunto de entrenamiento
list = FALSE)
training <- credit[ inTrain,]
testing  <- credit[-inTrain,]
nrow(training)
ctrl_def <- trainControl(
method = "cv",
summaryFunction = defaultSummary, #medida de rendimiento
number = 5) # número de folds
modelo_def <- train(Default ~ amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = ctrl_def,
family = "binomial",
preProcess = c("center", "scale")) # preprocesamiento de los datos
modelo_def
prediccion_def <- predict(modelo_def, newdata = testing)
confusionMatrix(prediccion_def, testing$Default)
control_two <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE)
modelo_two <- train( Default ~amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = control_two,
family = "binomial",
metric = 'ROC',
preProcess = c("center", "scale") ) # preprocesamiento de los datos
modelo_two
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
modelo <- train(Default ~amount+installment+age+ historygood + historypoor + purposeusedcar+ purposegoods.repair + purposeedu + foreigngerman + rentTRUE,
data = training,
method = "glm", #for logit
trControl = ctrl,
family = "binomial",
metric = 'ROC',
preProcess = c("center", "scale") )
modelo
library(pacman)
p_load(tidyverse, rio, tidymodels, glmnet, stargazer, dplyr, plotly, leaflet
library(pacman)
library(pacman)
p_load(tidyverse, rio, tidymodels, glmnet, stargazer, dplyr, plotly, leaflet)
library(pacman)
p_load(tidyverse,
rio,
tidymodels,
glmnet,
stargazer,
dplyr,
plotly,
leaflet,
rgeos,
tmaptools,
sf,
osmdata)
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
distributionPrice <- function (pricee) {
N = length(df$price)
pricee <- na.omit(df$price)
hist( df$price,col = "light blue")
}
distributionPrice()
df <- df %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
summary(df$precio_por_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
df <- df %>%
filter(between(precio_por_mt2, 700000,  15e6))
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
df <- df %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
df <- df %>%
filter(between(precio_por_mt2, 600000,  15e6))
p <- ggplot(df, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
theme_bw()
p
p <- ggplot(df, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
p
View(df)
mediana_sup_cubierta_test <- median(df_test$surface_covered, na.rm = TRUE) #118
mediana_sup_total_test <- median(df_test$surface_total, na.rm = TRUE) #120
mediana_bathrooms_test <- median(df_test$bathrooms, na.rm = TRUE) #3
mediana_rooms_test <- median(df_test$rooms, na.rm = TRUE) #2
df <- df %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
bedrooms = replace_na(bedrooms, 3),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
df_test <- df_test %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
bedrooms = replace_na(bedrooms, 3),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta_test),
surface_total = replace_na(surface_total, mediana_sup_total_test),)
df <- df %>%
mutate(property_type = case_when(property_type == "Apartamento" ~ 1,
property_type == "Casa" ~ 0)
df_test <- df_test %>%
db <- db %>%
filter(!is.na(lat) & !is.na(lon))
df <- df %>%
filter(!is.na(lat) & !is.na(lon))
df_test <- df_test %>%
filter(!is.na(lat) & !is.na(lon))
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat)
leaflet() %>%
addTiles() %>%
addCircles(lng = df_test$lon,
lat = df_test$lat)
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat)
limites <- getbb("Bogotá Colombia")
limites
df <- df %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
df_test <- df_test %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
db <- db %>%
mutate(precio_por_mt2_sc =( (precio_por_mt2 - min(precio_por_mt2)) / (max(precio_por_mt2) - min(precio_por_mt2))))
df <- df %>%
mutate(precio_por_mt2_sc =( (precio_por_mt2 - min(precio_por_mt2)) / (max(precio_por_mt2) - min(precio_por_mt2))))
df_test <- df_test %>%
mutate(precio_por_mt2_sc =( (precio_por_mt2 - min(precio_por_mt2)) / (max(precio_por_mt2) - min(precio_por_mt2))))
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 && << 13000000 ~ "#F3870E",
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 && =< 12999999 ~ "#F3870E",
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 && <= 12999999 ~ "#F3870E",
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 && precio_por_mt2_sc <= 12999999 ~ "#F3870E",
precio_por_mt2 >= 8000000 && precio_por_mt2_sc <= 9999999 ~ "#F3E70E",
precio_por_mt2 >= 6000000 && precio_por_mt2_sc <= 7999999 ~ "#AFF30E",
precio_por_mt2 >= 4000000 && precio_por_mt2_sc <= 5999999 ~ "#36F30E",
precio_por_mt2 >= 3000000 && precio_por_mt2_sc <= 3999999 ~ "#0EF35E",
precio_por_mt2 >= 2000000 && precio_por_mt2_sc <= 2999999 ~ "#0EF3CF",
precio_por_mt2 >= 1000000 && precio_por_mt2_sc <= 1999999 ~ "#0EC7F3",
precio_por_mt2 >= 900000 && precio_por_mt2_sc <= 999999 ~ "#0E66F3",
precio_por_mt2 >= 800000 && precio_por_mt2_sc <= 899999 ~ "#1E0EF3",
precio_por_mt2 >= 7000000 && precio_por_mt2_sc <= 799999 ~ "#970EF3"))
rlang::last_trace()
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 <  13000000 ~ "#F3870E",
precio_por_mt2 < 10000000 ~ "#F3E70E",
precio_por_mt2 < 8000000 ~ "#AFF30E",
precio_por_mt2 < 6000000 ~ "#36F30E",
precio_por_mt2 < 4000000 ~ "#0EF35E",
precio_por_mt2 < 3000000 ~ "#0EF3CF",
precio_por_mt2 < 2000000 ~ "#0EC7F3",
precio_por_mt2 < 100000 ~ "#0E66F3",
precio_por_mt2 < 900000 ~ "#1E0EF3",
precio_por_mt2 < 8000000 ~ "#970EF3"))
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
13000000 > precio_por_mt2 >  10000000 ~ "#F3870E"
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 & precio_por_mt2_sc <= 12999999 ~ "#F3870E",
precio_por_mt2 >= 8000000 & precio_por_mt2_sc <= 9999999 ~ "#F3E70E",
precio_por_mt2 >= 6000000 & precio_por_mt2_sc <= 7999999 ~ "#AFF30E",
precio_por_mt2 >= 4000000 & precio_por_mt2_sc <= 5999999 ~ "#36F30E",
precio_por_mt2 >= 3000000 & precio_por_mt2_sc <= 3999999 ~ "#0EF35E",
precio_por_mt2 >= 2000000 & precio_por_mt2_sc <= 2999999 ~ "#0EF3CF",
precio_por_mt2 >= 1000000 & precio_por_mt2_sc <= 1999999 ~ "#0EC7F3",
precio_por_mt2 >= 900000 & precio_por_mt2_sc <= 999999 ~ "#0E66F3",
precio_por_mt2 >= 800000 & precio_por_mt2_sc <= 899999 ~ "#1E0EF3",
precio_por_mt2 >= 7000000 & precio_por_mt2_sc <= 799999 ~ "#970EF3"))
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat,
col = df$color,
fillOpacity = 1,
opacity = 1,
radius = db$precio_por_mt2_sc*10)
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat,
col = df$color,
fillOpacity = 1,
opacity = 1,
radius = df$precio_por_mt2_sc*10)
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 & precio_por_mt2_sc <= 12999999 ~ "#F3870E",
precio_por_mt2 >= 8000000 & precio_por_mt2_sc <= 9999999 ~ "#F3E70E",
precio_por_mt2 >= 6000000 & precio_por_mt2_sc <= 7999999 ~ "#AFF30E",
precio_por_mt2 >= 4000000 & precio_por_mt2_sc <= 5999999 ~ "#17B53E",
precio_por_mt2 >= 3000000 & precio_por_mt2_sc <= 3999999 ~ "#0EF35E",
precio_por_mt2 >= 2000000 & precio_por_mt2_sc <= 2999999 ~ "#0EF3CF",
precio_por_mt2 >= 1000000 & precio_por_mt2_sc <= 1999999 ~ "#0EC7F3",
precio_por_mt2 >= 900000 & precio_por_mt2_sc <= 999999 ~ "#0E66F3",
precio_por_mt2 >= 800000 & precio_por_mt2_sc <= 899999 ~ "#1E0EF3",
precio_por_mt2 >= 7000000 & precio_por_mt2_sc <= 799999 ~ "#970EF3"))
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat,
col = df$color,
fillOpacity = 1,
opacity = 1,
radius = df$precio_por_mt2_sc*10)
df <- df %>%
mutate(color = case_when(precio_por_mt2 >= 13000000 ~ "#F32F0E",
precio_por_mt2 >= 10000000 & precio_por_mt2_sc <= 12999999 ~ "#F3870E",
precio_por_mt2 >= 8000000 & precio_por_mt2_sc <= 9999999 ~ "#F3E70E",
precio_por_mt2 >= 6000000 & precio_por_mt2_sc <= 7999999 ~ "#AFF30E",
precio_por_mt2 >= 4000000 & precio_por_mt2_sc <= 5999999 ~ "#0EF35E",
precio_por_mt2 >= 3000000 & precio_por_mt2_sc <= 3999999 ~ "#0EF3CF",
precio_por_mt2 >= 2000000 & precio_por_mt2_sc <= 2999999 ~ "#17B53E",
precio_por_mt2 >= 1000000 & precio_por_mt2_sc <= 1999999 ~ "#0EC7F3",
precio_por_mt2 >= 900000 & precio_por_mt2_sc <= 999999 ~ "#0E66F3",
precio_por_mt2 >= 800000 & precio_por_mt2_sc <= 899999 ~ "#1E0EF3",
precio_por_mt2 >= 7000000 & precio_por_mt2_sc <= 799999 ~ "#970EF3"))
leaflet() %>%
addTiles() %>%
addCircles(lng = df$lon,
lat = df$lat,
col = df$color,
fillOpacity = 1,
opacity = 1,
radius = df$precio_por_mt2_sc*10)
df <- df %>%
mutate(description = str_to_lower(description))
df_test <- df_test %>%
mutate(description = str_to_lower(description))
df <- df %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
df_test <- df_test %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
df <- df %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df_test <- df_test %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df <- df %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_test <- df_test %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
library(pacman)
p_load(tidyverse,
rio,
tidymodels,
glmnet,
stargazer,
dplyr,
plotly,
leaflet,
rgeos,
tmaptools,
sf,
osmdata)
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
glimpse(df)
glimpse(df_test)
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
View(df)
View(df_test)
df <- df %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|Apto|Apartamento|Pent house|pent house", description), "apartamento", property_type)) %>%
select(-property_type)
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type))
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type)) %>%
select(-property_type)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "Apartamento" ~ 1,
property_type_2 == "Casa" ~ 0)
)
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "Apartamento" ~ 1,
property_type_2 == "Casa" ~ 0)
)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 1,
property_type_2 == "Casa" ~ 0)
)
#test
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 1,
property_type_2 == "Casa" ~ 0)
)
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Casa" ~ 1)
)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Casa" ~ 1)
)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento"|"Apartamento" ~ 0,
property_type_2 == "Casa"|"casa" ~ 1)
)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Casa" ~ 1)
)
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
library(pacman)
p_load(tidyverse,
rio,
tidymodels,
glmnet,
stargazer,
dplyr,
plotly,
leaflet,
rgeos,
tmaptools,
sf,
osmdata)
file_dir <- this.path::here()
setwd(file_dir)
df <- read_csv("../stores/train.csv")
df_test <- read_csv(("../stores/test.csv"))
df <- df %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
View(df)
df <- df %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento|pent house", description), "apartamento", property_type))
df_test <- df_test %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type)) %>%
select(-property_type)
df <- df %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
#test
df_test <- df_test %>%
mutate(property_type = case_when(property_type_2 == "apartamento" ~ 0,
property_type_2 == "Apartamento" ~ 0,
property_type_2 == "Casa" ~ 1,
property_type_2 == "casa" ~ 1)
)
sapply(df, function(x) sum(is.na(x)))
sapply(df_test, function(x) sum(is.na(x)))
