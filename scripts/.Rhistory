Load packages
##############################################################
#       Big Data y Machine Learning                          #
#       Taller 2                                             #
##############################################################
#-------------------------------------------
# Load packages
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp")
lapply(pkg, require, character.only = T)
rm(pkg)
# Clean environment
rm(list = ls())
#-------------------------------------------
# Load data ---------------------------------
test_data <- read_csv("stores/test.csv")
##############################################################
#       Big Data y Machine Learning                          #
#       Taller 2                                             #
##############################################################
#-------------------------------------------
# Load packages
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp")
lapply(pkg, require, character.only = T)
rm(pkg)
# Clean environment
rm(list = ls())
#-------------------------------------------
# Load data ---------------------------------
test_data <- read_csv("stores/test.csv")
test_data <- read_csv("stores/test.csv")
test_data <- read_csv("stores/test.csv")
test_data <- read_csv("./stores/test.csv")
test_data <- read_csv("../stores/test.csv")
train_data <- read_csv("../stores/train.csv")
View(test_data)
data %>%
summarise_all(~sum(is.na(.))) %>% transpose()
test_data %>%summarise_all(~sum(is.na(.))) %>% transpose()
train_data %>%summarise_all(~sum(is.na(.))) %>% transpose()
data %>%count(rooms) %>% head()
data <- rbind(train_data, test_data)
data %>%count(rooms) %>% head()
data %>%count(bathrooms) %>% head()
mediana_sup_cubierta <- median(data$surface_covered, na.rm = TRUE)
mediana_sup_total<- median(db$surface_total, na.rm = TRUE)
mediana_sup_total<- median(data$surface_total, na.rm = TRUE)
summary(data$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
data <- data %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
summary(data$precio_por_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
ggplot(data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplot(data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
data <- data %>%
filter(between(precio_por_mt2, 2000000,  40e6))
ggplot(data, aes(x = price)) +
+     geom_histogram(fill = "darkblue", alpha = 0.4) +
+     labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
+     scale_x_log10(labels = scales::dollar) +
+     theme_bw()
ggplot(data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp")
lapply(pkg, require, character.only = T)
rm(pkg)
# Clean environment
rm(list = ls())
#-------------------------------------------
# Load data ---------------------------------
test_data <- read_csv("../stores/test.csv")
train_data <- read_csv("../stores/train.csv")
#Append data
train_data <- train_data %>% mutate(type = "train")
test_data <- test_data %>% mutate(type = "test")
data <- rbind(train_data, test_data)
# Spatial data ---------------------------------
sp_data <- st_as_sf(data, coords = c("lon", "lat"), crs = 4326)
factpal <- colorFactor(palette = c("red", "purple"), sp_data$type)
leaflet() %>%
addTiles() %>%
addCircles(data = sp_data, color = ~factpal(type)) %>%
addLegend("bottomright", colors = c('red', 'purple'), values = ~type,
title = "Type of sample",
labels = c("Test", "Train"),
opacity = 1
)
# Clean data ---------------------------------
#Test data
#Vamos a imputar valores para el número de rooms, baños,
#área de superficie total y cubierta. Los dos primeros con la moda al
#tomar valores enteros y los dos últimos con la mediana.
##Moda
data %>%count(rooms) %>% head() #La moda es 3
data %>%count(bathrooms) %>% head() #La moda es 2
##Mediana
mediana_sup_cubierta <- median(data$surface_covered, na.rm = TRUE)
mediana_sup_total<- median(data$surface_total, na.rm = TRUE)
## Poner datos faltantes
data <- data %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
data %>%
summarise_all(~sum(is.na(.))) %>% transpose()
View(train_data)
data %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
#-------------------------------------------
# Load packages
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp")
lapply(pkg, require, character.only = T)
rm(pkg)
# Clean environment
rm(list = ls())
#-------------------------------------------
# Load data ---------------------------------
test_data <- read_csv("../stores/test.csv")
train_data <- read_csv("../stores/train.csv")
#Append data
train_data <- train_data %>% mutate(type = "train")
test_data <- test_data %>% mutate(type = "test")
data <- rbind(train_data, test_data)
# Spatial data ---------------------------------
sp_data <- st_as_sf(data, coords = c("lon", "lat"), crs = 4326)
factpal <- colorFactor(palette = c("red", "purple"), sp_data$type)
leaflet() %>%
addTiles() %>%
addCircles(data = sp_data, color = ~factpal(type)) %>%
addLegend("bottomright", colors = c('red', 'purple'), values = ~type,
title = "Type of sample",
labels = c("Test", "Train"),
opacity = 1
)
# Clean data ---------------------------------
#Datos faltantes
#Vamos a imputar valores para el número de rooms, baños,
#área de superficie total y cubierta. Los dos primeros con la moda al
#tomar valores enteros y los dos últimos con la mediana.
##Moda
data %>%count(rooms) %>% head() #La moda es 3
data %>%count(bathrooms) %>% head() #La moda es 2
##Mediana
mediana_sup_cubierta <- median(data$surface_covered, na.rm = TRUE)
mediana_sup_total<- median(data$surface_total, na.rm = TRUE)
## Poner datos faltantes
data <- data %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
View(data)
data <- data %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
data <- data %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
data <- data %>%
mutate(parqueadero = as.numeric(grepl("parqueadero", data$description)))
View(data)
data <- data %>%
mutate(parqueadero = as.numeric(grepl("parqueadero | garaje", data$description)))
View(data)
tabulate(data$parqueadero)
data <- data %>%
mutate(balcon = as.numeric(grepl("balcon", data$description)))
data <- data %>%
mutate(terraza = as.numeric(grepl("terraza", data$description)))
View(data)
View(data)
available_tags("leisure")
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp", "rio", "plotly", "tmaptools", "osmdata", "tidymodels")
lapply(pkg, require, character.only = T)
rm(pkg)
available_tags("leisure")
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp", "rio", "plotly", "tmaptools", "osmdata", "tidymodels")
lapply(pkg, require, character.only = T)
rm(pkg)
install.packages("rio")
install.packages("plotly")
installed.packages(tmaptools)
installed.packages("tmaptools")
install.packages("tmaptools")
install.packages("osmdata")
install.packages("tidymodels")
pkg <- list("dplyr", "tidyverse", "sf", "leaflet", "Rcpp", "rio", "plotly", "tmaptools", "osmdata", "tidymodels")
lapply(pkg, require, character.only = T)
rm(pkg)
available_tags("leisure")
opq(bbox = getbb("Bogota Colombia")) %>%
add_osm_feature(key = "leisure" , value = "park")
getbb("Bogota Colombia")
